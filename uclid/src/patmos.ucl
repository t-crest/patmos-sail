// Model of Patmos

// Patmos: => no data dependencies enforced using assume, multiply per two the number of
// instructions to implement the dual-issue and assume that only, control flow operations
// only on pipeline 0 (assume again), load and store only from pipeline 0 (assume again),

// TODO: when is known the branch decision? => in execute

module sic {

  input current_op, previous_op: isa.opcode_t;
  input current_latencies, previous_latencies: isa.var_latency_t;
  input current_src, previous_src: isa.src_regs_t;
  input current_dst, previous_dst: isa.reg_t;  

  var progress: boolean;
  var is_inst_ready : boolean;
  var is_nstage_wbe_free: boolean;

  var is_branch_pending : boolean;
  var is_mem_pending: boolean;
  var is_store_pending: boolean;
  var is_data_dependant: boolean;

  instance previous : instruction(execute: (true));
  instance current : instruction(execute: (progress));				    
  
  var initialized: boolean;

  procedure inst_ready (instruction:isa.inst_t) 
  modifies is_inst_ready, is_mem_pending;
  {
    is_inst_ready = false;

    case
      (instruction.stage == EX)  : { if ((instruction.opcode != load_op) &&
      			    	         (instruction.opcode != store_op)) {
					   call mem_pending();
					   is_inst_ready = !is_store_pending;
				     }
    				   }
      (instruction.stage == MEM || instruction.stage == IF ||
       instruction.stage == ST || instruction.stage == WB ||
       instruction.stage == ID || instruction.stage == pre) : {
      			       	     is_inst_ready = true;
				   }
    esac
  }

  // We assume the next stage to be free except when it is occupied by the previous instruction
  // and its latency is higher than 1. However, this only works as we have a single previous
  // instruction => here we assume that previous cannot be block by another previous instruction
  procedure nstage_wbe_free ()
  modifies is_nstage_wbe_free;
  {
    is_nstage_wbe_free = true;
    
    case
      (current.instr.stage == MEM)  : { if (previous.instr.stage == WB &&
      				    	    previous.instr.fixed_latencies.wb >= 1 &&) {
						  is_nstage_wbe_free = false;
					       }
					    }
      (current.instr.stage == EX)   : { if (previous.instr.stage == MEM &&
      				    	      	  previous.instr.var_latencies.mem >= 1) {
						  is_nstage_wbe_free = false;
					      }
					    }
      (current.instr.stage == ID)   : { if (previous.instr.stage == EX &&
      				    	      	  previous.instr.fixed_latencies.ex >= 1) {
						  is_nstage_wbe_free = false;
					      }
					    }
      (current.instr.stage == IF)   : { if (previous.instr.stage == ID &&
      				    	      	  previous.instr.fixed_latencies.id >= 1) {
						  is_nstage_wbe_free = false;
					      }
					    }
      (current.instr.stage == pre)  : { if (previous.instr.stage == IF &&
      				    	      	  previous.instr.var_latencies.fetch >= 1) {
						  is_nstage_wbe_free = false;
					      }
   					    }
   esac
  }


  procedure mem_pending () modifies is_mem_pending;
  {
    is_mem_pending = false;

    if (previous.instr.opcode == store_op &&
        (previous.instr.stage == IF ||
  	 previous.instr.stage == ID ||
  	 previous.instr.stage == EX ||
  	 previous.instr.stage == MEM && 	 
          previous.instr.var_latencies.mem >= 1))) {
  	is_mem_pending = true;
    }   
  }


  init {
    progress = false;
    initialized = false;

    // This is to ensure that test-properties stays generic
    assume(is_store_pending == false);
    assume(is_branch_pending == false);
  }

  procedure update_progress()
  modifies progress, is_inst_ready, is_mem_pending, is_nstage_wbe_free;
  {
    call inst_ready(current.instr);
    call nstage_wbe_free();

    progress = is_inst_ready && is_nstage_wbe_free;
  }

  // Updating the state of the instructions
  next  {
    if (!initialized) {
	assume(current.instr.opcode == current_op);
	assume(previous.instr.opcode == previous_op);
        assume(current.instr.var_latencies == current_latencies);
        assume(previous.instr.var_latencies == previous_latencies);
        assume(current.instr.src_regs == current_src);
        assume(current.instr.dst_reg == current_dst);
        assume(previous.instr.src_regs == previous_src);
        assume(previous.instr.dst_reg == previous_dst);		
    	initialized' = true;
	// previous instruction can go ahead freely ...
      	next(previous);	
    } else {
	// previous instruction can go ahead freely ...	
	next(previous);
      	call update_progress();	
    	if (progress) { next(current);}
    }
  }
}
