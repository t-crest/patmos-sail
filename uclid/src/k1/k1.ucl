module k1 {

  input current_op, previous_op: common.opcode_t;
  input current_latencies, previous_latencies: common.latencies_t;
  input input_previous_stage: common.stage_t;

  // The instruction
  var previous_stage: common.stage_t;
  var previous_latency: integer;
  var previous_delay: integer;
  var previous_progress: boolean;  

  var current_stage: common.stage_t;
  var current_latency: integer;  
  var current_delay: integer;  
  var current_progress: boolean;

  // This computes the next stage and latency of an instruction (previous and current)
  procedure next_stage(stage: common.stage_t, opcode: common.opcode_t, in_latency: integer, latencies: common.latencies_t)
  returns (new: common.stage_t, latency: integer) {
    case
      (stage == pre) : { new = PF; latency = latencies.fetch; }
      (stage == PF)  : { new = ID; latency = 1; }
      // TODO: need to check for bcu what is this write back port simple register needed at stage E3 ?
      (stage == ID)  : { if (opcode == bcu_id_op) { new = post; latency = 0; }
      	     	         else { new = RR; latency = 1; }
		       }
      (stage == RR)  : { if (opcode == bcu_rr_op) { new = post; latency = 0; }
      	     	         else { new = E1; latency = 1; }
		       }
      (stage == E1)  : { new = E2; latency = 1; }
      (stage == E2)  : { new = E3; latency = 1; }
      (stage == E3)  : { if (opcode == alu_op || opcode == lsu_op) { new = post; latency = 0; }
      	     	       	 else { new = E4; latency = 1; }
		       }
      (stage == E4 || stage == post) : { new = post; latency = 0;}
    esac  
  }

  // This is the condition for the previous instruction to check if it can progress
  procedure check_previous_progress(input_delay: integer)
  returns(b: boolean, output_delay: integer) {
    // By default the instruction cannot move to the next stage 
    b = false;
    output_delay = input_delay;

    // If we were in the MEM stage and we are a store op, jump to the ST stage
    if (previous_op == store_op && previous_stage == MEM) { b = true; }

    // The semantic is different depending on whether the op is a store or not
    if (previous_latency <= 1) {
      b = true;

      // If the latency of the MEM stage is equal to 1, then this is a cache hit so no problem ...
      // NOTE: checking the type of operation is useless, this is set using assume in conditions
      if (previous_stage == EX && /*(previous_op == load_op || previous_op == store_op) &&*/
      	  previous_latencies.mem > 1 &&
      	  // Checking the stage being already in IF exclude the case of simultaneous transition
	  // by previous and current in MEM and IF, as in this case, priority is given to the
	  // data access, i.e the previous instruction.
	  (current_stage == IF && current_latency > 1)) {
	 b = false;
	 output_delay = input_delay + 1;
      }
    }
  }

  // This is the condition to check whether current can progress or not
  procedure check_current_progress(pprime_stage: common.stage_t)
  returns (b: boolean) {
    // By default the instruction cannot move to the next stage
    b = false;

    // If we were in the MEM stage and we are a store op, jump to the ST stage
    if (current_op == store_op && current_stage == MEM &&
        pprime_stage != ST) { b = true; }
    
    // Except if its latency is going to run out or has run out
    // And the pipeline is not stalled due to a cache miss in the MEM stage
    if (current_latency <= 1) {
      case
	// ... and its targeted next stage is not occupied by the previous 
        (current_stage == pre) : { if (pprime_stage != IF) { b = true; }}  
        (current_stage == IF)  : { if (pprime_stage != ID) { b = true; }}
        (current_stage == ID)  : { if (pprime_stage != EX) { b = true; }}
        (current_stage == EX)  : { if (pprime_stage != MEM) { b = true; }}	
        (current_stage == MEM) : { if ((current_op == store_op && pprime_stage != ST) ||
	       	       	       	       (current_op != store_op && pprime_stage != WB))
	       	       	   	   { b = true; }
			         }
	// Willing to switch from these stages mean exiting the pipeline ...
        (current_stage == ST ||
	 current_stage == WB)  : { b = true; }
      esac
    }
  }

  init {
    assume(previous_stage == input_previous_stage);
    assume(input_previous_stage == PF ==> previous_latency == previous_latencies.fetch);
    assume(input_previous_stage == ID ==> previous_latency == 1);
    assume(input_previous_stage == RR ==> previous_latency == 1);
    assume(input_previous_stage == E1 ==> previous_latency == 1);
    assume(input_previous_stage == E2 ==> previous_latency == 1);    
    assume(input_previous_stage == E3 ==> previous_latency == 1);
    assume(input_previous_stage == E4 ==> previous_latency == 1);    
    assume(input_previous_stage == pre ==> previous_latency == 1);    

    previous_delay = 0;
    previous_progress = false;

    current_stage = pre;
    current_latency = 0;
    current_delay = 0;
    current_progress = false;
  }

  // Updating the state of the instructions
  next  {
    call (previous_progress', previous_delay') = check_previous_progress(previous_delay);
    if (previous_progress') {
       call (previous_stage', previous_latency') = next_stage(previous_stage, previous_op, previous_latency, previous_latencies);
    } else {
      if (previous_latency > 0) { previous_latency' = previous_latency - 1; }
    }
    call (current_progress') = check_current_progress(previous_stage');
    if (current_progress') {
       call (current_stage', current_latency') = next_stage(current_stage, current_op, current_latency, current_latencies);	       
    } else {
       if (current_latency > 0) {current_latency' = current_latency - 1;}
       if (current_latency' == 0 && current_stage' != post) {current_delay' = current_delay + 1;}
    }
  }
}
	


