// Model of SIC (strictly in-order pipeline)

// This is a simplified version, without regs and thus
// data dependencies which are useless in fact (covered by mempending rule)

module sic {

  input current_op, previous_op: isa.opcode_t;
  input current_latencies, previous_latencies: isa.var_latency_t;
  input current_src, previous_src: isa.src_regs_t;
  input current_dst, previous_dst: isa.reg_t;    

  var progress: boolean;
  var is_inst_ready : boolean;
  var is_nstage_wbe_free: boolean;  
  
  var is_branch_pending : boolean;
  var is_mem_pending: boolean;
  var is_store_pending: boolean;
  var is_mem_blocking: boolean;

  var delays: integer;

  instance previous : instruction(execute: (true));
  instance current : instruction(execute: (progress));

  var initialized: boolean;

  /* This ensures Lemma IV.1 (progress dependence) */ 
  procedure inst_ready (instruction:isa.inst_t) 
  modifies is_inst_ready, is_branch_pending, 
  	   is_store_pending, is_mem_pending;
  {
    is_inst_ready = false;

    case
      (instruction.stage == pre) : { call branch_pending();
  				     call mem_pending(); 
  				     is_inst_ready  = !is_branch_pending &&
						      !is_mem_pending;
    				   }
      (instruction.stage == EX)  : { if ((instruction.opcode != load_op) &&
      			    	         (instruction.opcode != store_op)) {
					   call store_pending();
					   is_inst_ready = !is_store_pending;
				     }
    				   }
  /* Lemma IV.2 requires that the latencies of each instruction is decremented */
      (instruction.stage == MEM || instruction.stage == IF ||
       instruction.stage == ST || instruction.stage == WB ||
       instruction.stage == ID) : {
      			       	     is_inst_ready = true;
				   }
    esac
  }

  procedure mem_blocking ()
  modifies is_mem_blocking, delays;
  {
     is_mem_blocking = false;

     // We only block in the MEM stage, in the ST stage, we assume an unlimited of write
     // can be supported ...
     if ((previous.instr.stage == EX && previous.instr.fixed_latencies.ex == 0) /*||
     	  Commented as otherwise it is not correct: we are only interested in the case
	  where current is already in IF or just entered in IF (and thus is going to win
	  the access to the bus) and previous is going to send a request to the bus, so 
	  just leaving the EX stage for the MEM stage ...
     	  (previous.instr.stage == MEM && previous.instr.var_latencies.mem >= 1))*/ &&
     	 (previous.instr.opcode == load_op ||
	  previous.instr.opcode == store_op) &&
	  (current.instr.stage == IF && current.instr.var_latencies.fetch >= 1)) {
	    is_mem_blocking = true;
	    delays = delays + 1;
     }
  }

  // This version of willbefree from the SIC paper is much simpler
  // We assume the next stage to be free except when it is occupied by the previous instruction
  // and its latency is higher than 1. However, this only works as we have a single previous
  // instruction => here we assume that previous cannot be block by another previous instruction
  procedure nstage_wbe_free ()
  modifies is_nstage_wbe_free;
  {
    is_nstage_wbe_free = true;
    
    case
      (current.instr.stage == MEM)  : { if (previous.instr.stage == ST &&
      				    	      	  previous.instr.var_latencies.st >= 1 &&
      				    	      	  current.instr.opcode == store_op) {
						  is_nstage_wbe_free = false;
					       }
					       if (previous.instr.stage == WB &&
      				    	      	  previous.instr.fixed_latencies.wb >= 1 &&
      				    	      	  current.instr.opcode != store_op) {
						  is_nstage_wbe_free = false;
					       }
					    }
      (current.instr.stage == EX)   : { if (previous.instr.stage == MEM &&
      				    	      	  previous.instr.var_latencies.mem >= 1) {
						  is_nstage_wbe_free = false;
					      }
					    }
      (current.instr.stage == ID)   : { if (previous.instr.stage == EX &&
      				    	      	  previous.instr.fixed_latencies.ex >= 1) {
						  is_nstage_wbe_free = false;
					      }
					    }
      (current.instr.stage == IF)   : { if (previous.instr.stage == ID &&
      				    	      	  previous.instr.fixed_latencies.id >= 1) {
						  is_nstage_wbe_free = false;
					      }
					    }
      (current.instr.stage == pre)  : { if (previous.instr.stage == IF &&
      				    	      	  previous.instr.var_latencies.fetch >= 1) {
						  is_nstage_wbe_free = false;
					      }
   					    }
   esac
  }


  procedure branch_pending () modifies is_branch_pending;
  {
    is_branch_pending = false;

    if (previous.instr.opcode == branch_op &&
        (previous.instr.stage == IF ||
  	 previous.instr.stage == ID ||
  	 (previous.instr.stage == EX &&
	  previous.instr.fixed_latencies.ex >= 1))) {
  	is_branch_pending = true;
    }
  }

  procedure mem_pending () modifies is_mem_pending, is_store_pending;
  {
    var load : boolean;

    is_store_pending = false;
    is_mem_pending = false;

    load = false;
    
    if (previous.instr.opcode == load_op &&
      	(previous.instr.stage == IF ||
  	 previous.instr.stage == ID ||
  	 previous.instr.stage == EX || 
  	 (previous.instr.stage == MEM &&
	  previous.instr.var_latencies.mem >= 1)))  {
  	load = true;
    }

    call store_pending();

    is_mem_pending = is_store_pending || load;
  }

  // Note: in fact this is useless as ST stage models a asynchronous
  // writing which are unlimited in their number ...
  procedure store_pending () modifies is_store_pending;
  {
    is_store_pending = false;

    if (previous.instr.opcode == store_op &&
        (previous.instr.stage == IF ||
  	 previous.instr.stage == ID ||
  	 previous.instr.stage == EX ||
  	 previous.instr.stage == MEM ||
	 (previous.instr.stage == ST && 	 
          previous.instr.var_latencies.st >= 1))) {
  	is_store_pending = true;
    }   
  }

  init {
    progress = false;
    initialized = false;
  }

  procedure update_progress()
  modifies progress, is_inst_ready, is_mem_pending, /*is_pinst_ready,*/
  	   is_store_pending, is_branch_pending,
	   is_nstage_wbe_free;
  {
    call inst_ready(current.instr);
    call nstage_wbe_free();

    progress = is_inst_ready && is_nstage_wbe_free;
  }

  // Updating the state of the instructions
  next  {
    if (!initialized) {
	assume(current.instr.opcode == current_op);
	assume(previous.instr.opcode == previous_op);
        assume(current.instr.var_latencies == current_latencies);
        assume(previous.instr.var_latencies == previous_latencies);
        assume(current.instr.src_regs.src1 == 0bv5);
        assume(current.instr.src_regs.src2 == 0bv5);	
        assume(current.instr.dst_reg == 0bv5);
        assume(previous.instr.src_regs.src1 == 0bv5);
        assume(previous.instr.src_regs.src2 == 0bv5);	
        assume(previous.instr.dst_reg == 0bv5);
    	initialized' = true;
	delays' = 0;	
	// previous instruction can go ahead freely ...
      	next(previous);	
    } else {
      	// Previous instruction cannot go ahead freely
	// If the current instruction is performing
	// a memory access in IF, then previous
	// must be stalled if reached MEM
      	call mem_blocking();
	if (!is_mem_blocking) { next(previous); }    
      	call update_progress();	
    	if (progress) { next(current);}
    }
  }
}

