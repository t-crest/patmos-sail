// Model of PRET

// Note that PRET assumes everything in the scratchpad => so no
// problem. This is equivalent to set latencies to 1.  But then if you
// replace the sratchpad -> the pipeline is no longer free from timing
// anomalies.

module pret {

  type inst_t = isa.inst_pret_t;       

  input current_op, previous_op: isa.opcode_t;
  input current_latencies, previous_latencies: isa.var_latency_t;
  input current_tid, previous_tid: bv2;
  input previous_stage: isa.stage_t;

  var blocked: integer;

  var progress: boolean;
  var is_inst_ready : boolean;
  var is_branch_pending : boolean;
  var is_mem_pending: boolean;
  var is_store_pending: boolean;
  var is_data_dependant: boolean;

  var is_nstage_wbe_free: boolean;

  instance previous : instruction(execute: (true));
  instance current : instruction(execute: (progress));

  var initialized: boolean;

  procedure nstage_wbe_free ()
  modifies is_nstage_wbe_free;
  {
    is_nstage_wbe_free = false;
    
    case
      (current.instr.stage == ST ||
       current.instr.stage == WB)   : { 
				        is_nstage_wbe_free = true;
				      }
      (current.instr.stage == MEM)  : { if (previous.instr.var_latencies.st <= 1 &&
      				    	    current.instr.opcode == store_op) {
					  is_nstage_wbe_free = true;
					}
					if (previous.instr.fixed_latencies.wb <= 1 &&
      				    	    current.instr.opcode != store_op) {
					  is_nstage_wbe_free = true;
					}
			              }
      (current.instr.stage == EX)   : { if (previous.instr.var_latencies.mem <= 1) {
					  is_nstage_wbe_free = true;
				        }
				      }
      (current.instr.stage == ID)   : { if (previous.instr.fixed_latencies.ex <= 1) {
					  is_nstage_wbe_free = true;
					}
				      }
      (current.instr.stage == IF)   : { if (previous.instr.fixed_latencies.id <= 1) {
				          is_nstage_wbe_free = true;
					}
				      }
      (current.instr.stage == pre)  : { if (previous.instr.var_latencies.fetch <= 1) {
				          is_nstage_wbe_free = true;
				         }
   				      }
   esac
  }

  init {
    progress = false;  
    initialized = false;
    blocked = 0;

    // This is to ensure that test-properties stays generic
    assume(is_inst_ready == true);
    assume(is_branch_pending == false);
    assume(is_mem_pending == false);
    assume(is_store_pending == false);
    assume(is_data_dependant == false);
  }

  procedure update_progress()
  modifies progress, is_nstage_wbe_free;
  {
    call nstage_wbe_free();

    progress = is_nstage_wbe_free;
  }

  // Updating the state of the instructions
  next  {
    if (!initialized) {
	assume(current.instr.opcode == current_op);
	assume(previous.instr.opcode == previous_op);
        assume(current.instr.var_latencies == current_latencies);
        assume(previous.instr.var_latencies == previous_latencies);
        assume(current.instr.tid == current_tid);	
        assume(previous.instr.tid == previous_tid);
	assume(previous.instr.stage == previous_stage);
	assume(current.instr.stage == pre);
    	initialized' = true;
    } 
    next(previous);
    call update_progress();
    if (progress') { next(current); }
    else { if (current.instr.stage != post) {blocked' = blocked + 1; }}
  }
}

