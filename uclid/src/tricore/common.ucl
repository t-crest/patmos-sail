module common {
	// Pipeline stages
	type stage_t = enum { pre, IF, ID, EX, EX2, WB, ST, post };
	type dual_stage_t = record { I_pipe: stage_t, LS_pipe: stage_t };

	type opcode_t = enum { load_op, store_op, mac_op, nop, other_op };

	// Couple of an I- and a LS-instruction
	type instr_pair_t = record { I_instr: opcode_t, LS_instr: opcode_t };

	// Latencies information for each instruction
	type latencies_t = record { IF: integer, ID: integer, EX: integer, EX2: integer, WB: integer, ST: integer };
	type dual_latencies_t = record { I_pipe: latencies_t, LS_pipe: latencies_t };

	type dual_integer_t = record { I_pipe: integer, LS_pipe: integer };
	type dual_boolean_t = record { I_pipe: boolean, LS_pipe: boolean };
 
    type bus_access_t = record { pbus_i: dual_boolean_t, pbus_j: dual_boolean_t, dbus_i: boolean, dbus_j: boolean };
    type waw_t = record { ii: boolean, ij: boolean, ji: boolean, jj: boolean };
}
