module tricore {

	input current_ops, previous_ops: common.instr_pair_t;
	input current_initial_latencies, previous_initial_latencies: common.dual_latencies_t;
	input input_previous_stages: common.dual_stage_t;
    input input_current_stage: common.stage_t;
    input bus_access: common.bus_access_t;
    input full_SB_i, full_SB_j, mem_dep: boolean;
    input waw_dep: common.waw_t;

	// The instructions
	var current_stages, previous_stages: common.dual_stage_t;
	var current_latencies, previous_latencies: common.dual_integer_t;
	var current_delays, previous_delays: common.dual_integer_t;
    var current_progress, previous_progress: common.dual_boolean_t;
    var current_stalled, previous_stalled: common.dual_boolean_t;
    
	// This computes the next stages and latencies of an instruction pair (previous and current)
	procedure next_stages(progress_prime: common.dual_boolean_t, stalled_prime: common.dual_boolean_t, stages: common.dual_stage_t, opcodes: common.instr_pair_t, latencies: common.dual_latencies_t, in_latencies: common.dual_integer_t)
	returns (new: common.dual_stage_t, new_latencies: common.dual_integer_t)
	{
		new = stages;
		new_latencies = in_latencies;
        
		if (progress_prime.LS_pipe) {
			case
			  (stages.LS_pipe == pre) : { new.LS_pipe = IF; new_latencies.LS_pipe = latencies.LS_pipe.IF; }
			  (stages.LS_pipe == IF)  : { new.LS_pipe = ID; new_latencies.LS_pipe = latencies.LS_pipe.ID; }
			  (stages.LS_pipe == ID)  : { 
			  	if (opcodes.LS_instr == nop) { new.LS_pipe = post; new_latencies.LS_pipe = 0; }
			  	else { new.LS_pipe = EX; new_latencies.LS_pipe = latencies.LS_pipe.EX; }
			  }
			  (stages.LS_pipe == EX)  : {
			  	if (opcodes.LS_instr == nop) { new.LS_pipe = post; new_latencies.LS_pipe = 0; }
			  	else {new.LS_pipe = WB; new_latencies.LS_pipe = latencies.LS_pipe.WB; }
			  }
            (stages.LS_pipe == WB) : {
                    if (opcodes.LS_instr == store_op) { new.LS_pipe = ST; new_latencies.LS_pipe = latencies.LS_pipe.ST; }
                    else { new.LS_pipe = post; new_latencies.LS_pipe = 0; }
                }
                (stages.LS_pipe == ST || stages.LS_pipe == post)  : { new.LS_pipe = post; new_latencies.LS_pipe = 0; }
            esac
        }
        else {
            if (!stalled_prime.LS_pipe && in_latencies.LS_pipe > 0) { new_latencies.LS_pipe = in_latencies.LS_pipe - 1; }
        }
        
        if (progress_prime.I_pipe) {
			case
			  (stages.I_pipe == pre) : { new.I_pipe = IF; new_latencies.I_pipe = latencies.I_pipe.IF; }
			  (stages.I_pipe == IF)  : { new.I_pipe = ID; new_latencies.I_pipe = latencies.I_pipe.ID; }
			  (stages.I_pipe == ID)  : {
			  	if (opcodes.I_instr == nop) { new.I_pipe = post; new_latencies.I_pipe = 0; }
			  	else { new.I_pipe = EX; new_latencies.I_pipe = latencies.I_pipe.EX; }
			  }
			  (stages.I_pipe == EX)  : { if (opcodes.I_instr == mac_op) { new.I_pipe = EX2; new_latencies.I_pipe = latencies.I_pipe.EX2; }
										else {
											if (opcodes.I_instr == nop) { new.I_pipe = post; new_latencies.I_pipe = 0; }
											else { new.I_pipe = WB; new_latencies.I_pipe = latencies.I_pipe.WB; }
										}
			  }
			  (stages.I_pipe == EX2)  : {
			  	if (opcodes.I_instr == nop) { new.I_pipe = post; new_latencies.I_pipe = 0; }
			  	else { new.I_pipe = WB; new_latencies.I_pipe = latencies.I_pipe.WB; }
			  }
			  (stages.I_pipe == WB || stages.I_pipe == post) : { new.I_pipe = post; new_latencies.I_pipe = 0; }
			esac
		}
		else {
			if (!stalled_prime.I_pipe && in_latencies.I_pipe > 0) { new_latencies.I_pipe = in_latencies.I_pipe - 1; }
		}
	}

   // These are the conditions for the previous instructions to check if they can progress
    procedure check_previous_progress(stalled: common.dual_boolean_t)
    returns(b: common.dual_boolean_t) {
        // By default the instructions cannot move to the next stages
        b.I_pipe = false;
        // Except if their latencies are going to run out or have run out
        // And their pipelines are not stalled
        if (previous_latencies.I_pipe <= 1 && !stalled.I_pipe) {
            b.I_pipe = true;
            
            // priority is always given to LS in case of simultaneous transitions
            if (previous_stages.I_pipe == pre && bus_access.pbus_i.I_pipe &&
                ((previous_stages.LS_pipe == pre && bus_access.pbus_i.LS_pipe) || (current_stages.LS_pipe == pre && bus_access.pbus_j.LS_pipe) ||
                 (previous_stages.LS_pipe == ID && previous_ops.LS_instr == load_op && bus_access.dbus_i) || (current_stages.LS_pipe == ID && current_ops.LS_instr == load_op && bus_access.dbus_j))) {
                b.I_pipe = false;
            }
        }

        b.LS_pipe = false;
        if (previous_latencies.LS_pipe <= 1 && !stalled.LS_pipe) {
            b.LS_pipe = true;
          }
    }

	// Checking stalls for the previous instructions
	procedure check_previous_stalling()
	returns (b: common.dual_boolean_t) {
        var common_stalling: boolean;
		// Stalling whenever one of the current instructions is in IF with a bus access...
        common_stalling = (current_stages.I_pipe == IF && current_latencies.I_pipe > 1) ||
			(current_stages.LS_pipe == IF && current_latencies.LS_pipe > 1) ||
            // ... or in EX with a bus access (load only, in LS pipeline)
            (current_stages.LS_pipe == EX && bus_access.dbus_j && current_latencies.LS_pipe > 1);
        b.I_pipe = common_stalling || (previous_stages.LS_pipe == IF && bus_access.pbus_i.LS_pipe && previous_latencies.LS_pipe > 1) || (previous_stages.LS_pipe == EX && bus_access.dbus_i && previous_latencies.LS_pipe > 1);
        b.LS_pipe = common_stalling || (previous_stages.I_pipe == IF && bus_access.pbus_i.I_pipe && previous_latencies.I_pipe > 1) ||
                // solving WAW hazards in ID
                (previous_stages.LS_pipe == ID &&
                (waw_dep.ii && (previous_stages.I_pipe == ID || previous_stages.I_pipe == EX)) ||
                (waw_dep.ij && (current_stages.I_pipe == ID || current_stages.I_pipe == EX)));
	}
	
	// These are the conditions for the current instructions to check if they can progress
	procedure check_current_progress(stalled: common.dual_boolean_t, pprime_stage: common.dual_stage_t)
	returns(b: common.dual_boolean_t) {
		// By default the instructions cannot move to the next stages
		b.I_pipe = false;
        // Except if their latencies are going to run out or have run out
        // And their pipelines are not stalled
		if (current_latencies.I_pipe <= 1 && !stalled.I_pipe) {
			case
				// ... and its targeted next stage is not occupied by the previous
				(current_stages.I_pipe == pre) : { if (pprime_stage.I_pipe != IF &&
                                                       // priority is always given to LS in case of simultaneous transitions
                                                       (!bus_access.pbus_j.I_pipe ||
                                                       ((pprime_stage.LS_pipe != EX || previous_ops.LS_instr != load_op || !bus_access.dbus_i) &&
                                                       (pprime_stage.LS_pipe != IF || !bus_access.pbus_i.LS_pipe) &&
                                                       (current_stages.LS_pipe != pre || !bus_access.pbus_j.LS_pipe) &&
                                                       (current_stages.LS_pipe != ID || current_ops.LS_instr != load_op || !bus_access.dbus_j)))) { b.I_pipe = true; }}
				(current_stages.I_pipe == IF)  : { if (pprime_stage.I_pipe != ID) { b.I_pipe = true; }}
				(current_stages.I_pipe == ID)  : { if (pprime_stage.I_pipe != EX) { b.I_pipe = true; }}
				(current_stages.I_pipe == EX)  : { if ((current_ops.I_instr != mac_op && pprime_stage.I_pipe != WB) || (current_ops.I_instr == mac_op && pprime_stage.I_pipe != EX2)) { b.I_pipe = true; }}	
				(current_stages.I_pipe == EX2)  : { if (pprime_stage.I_pipe != WB) { b.I_pipe = true; }}		
				// Willing to switch from these stages mean exiting the pipeline ...
				(current_stages.I_pipe == WB || current_stages.I_pipe == post)  : { b.I_pipe = true; }
			esac
		}

		b.LS_pipe = false;
		if (current_latencies.LS_pipe <= 1 && !stalled.LS_pipe) {
			case
				// ... and its targeted next stage is not occupied by the previous
				(current_stages.LS_pipe == pre) : { if (pprime_stage.LS_pipe != IF &&
                                                        // priority is given to previous in EX in case of simultaneous transitions
                                                        (!bus_access.pbus_j.LS_pipe || pprime_stage.LS_pipe != EX || previous_ops.LS_instr != load_op || !bus_access.dbus_i)) { b.LS_pipe = true; }}
				(current_stages.LS_pipe == IF)  : { if (pprime_stage.LS_pipe != ID) { b.LS_pipe = true; }}
				(current_stages.LS_pipe == ID)  : { if (pprime_stage.LS_pipe != EX) { b.LS_pipe = true; }}
				(current_stages.LS_pipe == EX)  : { if (pprime_stage.LS_pipe != WB) { b.LS_pipe = true; }}
				(current_stages.LS_pipe == WB || current_stages.LS_pipe == ST || current_stages.LS_pipe == post)  : { b.LS_pipe = true; }
			esac
		}
	}

	// Checking stalls for the current instructions
	procedure check_current_stalling(pprime_stages: common.dual_stage_t)
	returns (b: common.dual_boolean_t) {
        var common_stalling: boolean;
        
		common_stalling = (pprime_stages.LS_pipe == EX && previous_ops.LS_instr == load_op && bus_access.dbus_i) ||
			(pprime_stages.LS_pipe == IF && bus_access.pbus_i.LS_pipe) ||
			(pprime_stages.I_pipe == IF && bus_access.pbus_i.I_pipe);
        b.I_pipe = common_stalling || (current_stages.LS_pipe == IF && bus_access.pbus_j.LS_pipe && current_latencies.LS_pipe > 1) || (current_stages.LS_pipe == EX && bus_access.dbus_j && current_latencies.LS_pipe > 1);
        b.LS_pipe = common_stalling || (current_stages.I_pipe == IF && bus_access.pbus_j.I_pipe && current_latencies.I_pipe > 1) ||
                // solving WAW hazards in ID
                (current_stages.LS_pipe == ID &&
                (waw_dep.ji && (previous_stages.I_pipe == ID || previous_stages.I_pipe == EX)) ||
                (waw_dep.jj && (current_stages.I_pipe == ID || current_stages.I_pipe == EX)));
	}


	init {
		assume(previous_stages == input_previous_stages);
		assume(input_previous_stages.LS_pipe == IF ==> previous_latencies.LS_pipe == previous_initial_latencies.LS_pipe.IF);
		assume(input_previous_stages.LS_pipe == ID ==> previous_latencies.LS_pipe == previous_initial_latencies.LS_pipe.ID);
		assume(input_previous_stages.LS_pipe == EX ==> previous_latencies.LS_pipe == previous_initial_latencies.LS_pipe.EX);
		assume(input_previous_stages.LS_pipe == WB ==> previous_latencies.LS_pipe == previous_initial_latencies.LS_pipe.WB);
        assume(input_previous_stages.LS_pipe == ST ==> previous_latencies.LS_pipe == previous_initial_latencies.LS_pipe.ST);
		assume(input_previous_stages.LS_pipe == pre ==> previous_latencies.LS_pipe == 1);    

		assume(input_previous_stages.I_pipe == IF ==> previous_latencies.I_pipe == previous_initial_latencies.I_pipe.IF);
		assume(input_previous_stages.I_pipe == ID ==> previous_latencies.I_pipe == previous_initial_latencies.I_pipe.ID);
		assume(input_previous_stages.I_pipe == EX ==> previous_latencies.I_pipe == previous_initial_latencies.I_pipe.EX);
		assume(input_previous_stages.I_pipe == EX2 ==> previous_latencies.I_pipe == previous_initial_latencies.I_pipe.EX2);
		assume(input_previous_stages.I_pipe == WB ==> previous_latencies.I_pipe == previous_initial_latencies.I_pipe.WB);
		assume(input_previous_stages.I_pipe == pre ==> previous_latencies.I_pipe == 1);
        
        current_stages.LS_pipe = pre;
        current_latencies.LS_pipe = 1;
        
        assume(current_stages.I_pipe == input_current_stage);
        assume(input_current_stage == IF ==> current_latencies.I_pipe == current_initial_latencies.I_pipe.IF);
        assume(input_current_stage == ID ==> current_latencies.I_pipe == current_initial_latencies.I_pipe.ID);
        assume(input_current_stage == EX ==> current_latencies.I_pipe == current_initial_latencies.I_pipe.EX);
        assume(input_current_stage == EX2 ==> current_latencies.I_pipe == current_initial_latencies.I_pipe.EX2);
        assume(input_current_stage == WB ==> current_latencies.I_pipe == current_initial_latencies.I_pipe.WB);
        assume(input_current_stage == pre ==> current_latencies.I_pipe == 1);

		previous_delays.I_pipe = 0; previous_delays.LS_pipe = 0;
		previous_progress.I_pipe = false; previous_progress.LS_pipe = false;
		previous_stalled.I_pipe = false; previous_stalled.LS_pipe = false;
		
		current_delays.I_pipe = 0; current_delays.LS_pipe = 0;
		current_progress.I_pipe = false; current_progress.LS_pipe = false;
		current_stalled.I_pipe = false; current_stalled.LS_pipe = false;
	}

	procedure update_delays(delays: common.dual_integer_t, inc_LS: boolean, inc_I: boolean)
	returns (new_delays: common.dual_integer_t) {
		if (inc_LS) { new_delays.LS_pipe = delays.LS_pipe+1; } else { new_delays.LS_pipe = delays.LS_pipe; }
		if (inc_I) { new_delays.I_pipe = delays.I_pipe+1; } else { new_delays.I_pipe = delays.I_pipe; }
	}

    // Updating the state of the instructions
    next {
        call (previous_stalled') = check_previous_stalling();
        call (previous_progress') = check_previous_progress(previous_stalled');
        call (previous_stages', previous_latencies') = next_stages(previous_progress', previous_stalled', previous_stages, previous_ops, previous_initial_latencies, previous_latencies);
        
        call (current_stalled') = check_current_stalling(previous_stages');
        call (current_progress') = check_current_progress(current_stalled', previous_stages');
        call (current_stages', current_latencies') = next_stages(current_progress', current_stalled', current_stages, current_ops, current_initial_latencies, current_latencies);

        call (previous_delays') = update_delays(previous_delays, !previous_progress'.LS_pipe && (previous_latencies'.LS_pipe == 0 || previous_stalled'.LS_pipe) && previous_stages'.LS_pipe != post, !previous_progress'.I_pipe && (previous_latencies'.I_pipe == 0 || previous_stalled'.I_pipe) && previous_stages'.I_pipe != post);
        call (current_delays') = update_delays(current_delays, !current_progress'.LS_pipe && (current_latencies'.LS_pipe == 0 || current_stalled'.LS_pipe) && current_stages'.LS_pipe != post, !current_progress'.I_pipe && (current_latencies'.I_pipe == 0 || current_stalled'.I_pipe) && current_stages'.I_pipe != post);
    }
}
