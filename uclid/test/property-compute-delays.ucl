// Here we compute delays an instruction suffers from a subsequent one
// SIC: a value of 0 is expected

// TODO: this is incorrect, we only get a counter example. To be sure to
// get the highest value for the delay, what should we do:
//
// - search with a property and a specific given value that we increase and
//   check if a counter example can be reached?

module main {

  type stage_t = isa.stage_t;
  type opcode_t = isa.opcode_t;

  instance run : conditions();

  next {
    next(run);
  }

  property[LTL] achieved_delay: G(run.cond.pipeline.delays < 2);

  // To check that all previous instruction have been retired from the pipeline
  // This is enough, no need to ensure that the current instruction has been retired as well
  property[LTL] bmc_enough: G(run.cond.step == param.bmc_depth
  			      ==> run.cond.pipeline.previous.instr.stage == post);

  control {
    vbmc = bmc(param.bmc_depth);
    check;
    print_results;
    vbmc.print_cex(run.cond.step, run.cond.pipeline.progress, run.cond.pipeline.is_inst_ready, run.cond.pipeline.is_nstage_wbe_free,
    		   run.cond.pipeline.is_branch_pending, run.cond.pipeline.is_mem_pending,
    		   run.cond.pipeline.is_store_pending, run.cond.pipeline.is_data_dependant,
    		   run.cond.pipeline.current.instr, run.cond.pipeline.previous.instr,
		   run.cond.pipeline.is_mem_blocking, run.cond.pipeline.delays);
  }
}
