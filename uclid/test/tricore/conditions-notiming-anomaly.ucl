module conditions {

  var ops_i, ops_j: common.instr_pair_t;
  var latencies_i, latencies_j: common.dual_latencies_t;
  var stages_i: common.dual_stage_t;  

  instance cond : test(cond_ops_i: (ops_i), cond_ops_j: (ops_j),
  	   	       cond_latencies_i: (latencies_i),
		       cond_latencies_j: (latencies_j),
		       cond_stages_i: (stages_i));

  init {
    // Assume all types of opcodes
    assume(ops_i.I_instr == nop || ops_i.I_instr == mac_op || ops_i.I_instr == other_op);
    assume(ops_i.LS_instr == nop || ops_i.LS_instr == load_store_op || ops_i.LS_instr == other_op);
    assume(ops_j.I_instr == nop || ops_j.I_instr == mac_op || ops_j.I_instr == other_op);
    assume(ops_j.LS_instr == nop || ops_j.LS_instr == load_store_op || ops_j.LS_instr == other_op);

    // Assume variable latencies for all instructions in IF stage
	assume(0 < latencies_i.I_pipe.IF && latencies_i.I_pipe.IF <= param.max_latency);
	assume(0 < latencies_i.LS_pipe.IF && latencies_i.LS_pipe.IF <= param.max_latency);
	assume(0 < latencies_j.I_pipe.IF && latencies_j.I_pipe.IF <= param.max_latency);
	assume(latencies_j.LS_pipe.IF == latencies_j.I_pipe.IF); // Reduce state space: current instructions (j) start both at pre and both pipelines reach IF at the same time
    // Assume latencies for ID stage
    assume(latencies_i.I_pipe.ID == 1);
    assume(latencies_i.LS_pipe.ID == 1);
    assume(latencies_j.I_pipe.ID == 1);
    assume(latencies_j.LS_pipe.ID == 1);
    // Assume latencies for EX I-stage
    assume(latencies_i.I_pipe.EX == 1);
    assume(latencies_j.I_pipe.EX == 1);
	// Assume latencies for EX2 stage
    assume(latencies_i.I_pipe.EX2 == 1);
    assume(latencies_j.I_pipe.EX2 == 1);
    assume(latencies_i.LS_pipe.EX2 == 1);
    assume(latencies_j.LS_pipe.EX2 == 1);
    // Assume variable latencies for load and store opcodes in EX stage
    assume(ops_i.LS_instr == load_store_op ==> (0 < latencies_i.LS_pipe.EX && latencies_i.LS_pipe.EX <= param.max_latency));
    assume(ops_j.LS_instr == load_store_op ==> (0 < latencies_j.LS_pipe.EX && latencies_j.LS_pipe.EX <= param.max_latency));
    // Assume that other LS-operations take 1 cycle in EX stage 
    assume((ops_i.LS_instr == nop || ops_i.LS_instr == other_op) ==> latencies_i.LS_pipe.EX == 1);
    assume((ops_j.LS_instr == nop || ops_j.LS_instr == other_op) ==> latencies_j.LS_pipe.EX == 1);
    // Assume latencies for WB stage
    assume(latencies_i.I_pipe.WB == 1);
    assume(latencies_i.LS_pipe.WB == 1);
    assume(latencies_j.I_pipe.WB == 1);
    assume(latencies_j.LS_pipe.WB == 1);
	// Assume stages for previous instr.
    assume(stages_i.I_pipe == pre || stages_i.I_pipe == IF || stages_i.I_pipe == ID || stages_i.I_pipe == EX || stages_i.I_pipe == EX2 || stages_i.I_pipe == WB);
    assume(stages_i.LS_pipe == pre || stages_i.LS_pipe == IF || stages_i.LS_pipe == ID || stages_i.LS_pipe == EX || stages_i.LS_pipe == WB);
    // This is to allow only MAC operation to start from EX2 stage
    assume(stages_i.I_pipe == EX2 ==> ops_i.I_instr == mac_op);
  }

  next {
	next(cond);
  }
}
