module conditions {
    var ops_i, ops_j: common.instr_pair_t;
    var latencies_i, latencies_j: common.dual_latencies_t;
    var stages_i: common.dual_stage_t;
    var stage_j: common.stage_t;
    var bus: common.bus_access_t;
    var full_SB_i, full_SB_j: boolean;
    var mem_dep: boolean;
    var waw: common.waw_t;

    instance param_set : param();
    
    instance cond : test(cond_ops_i: (ops_i), cond_ops_j: (ops_j),
                         cond_latencies_i: (latencies_i),
                         cond_latencies_j: (latencies_j),
                         cond_stages_i: (stages_i),
                         cond_stage_j: (stage_j),
                         cond_bus: (bus),
                         cond_full_SB_i: (full_SB_i),
                         cond_full_SB_j: (full_SB_j),
                         cond_mem_dep: (mem_dep),
                         cond_waw: (waw));
    
    
    procedure set_init_SB()
        modifies ops_i, ops_j, full_SB_i, full_SB_j, mem_dep, bus, latencies_i, latencies_j;
    {
        /*assume(ops_i.LS_instr == nop || ops_i.LS_instr == load_op || ops_i.LS_instr == store_op || ops_i.LS_instr == other_op);
        assume(ops_j.LS_instr == nop || ops_j.LS_instr == load_op ||  ops_j.LS_instr == store_op ||ops_j.LS_instr == other_op);*/
        assume(ops_i.LS_instr == load_op || ops_i.LS_instr == store_op || ops_i.LS_instr == other_op);
        assume(ops_j.LS_instr == load_op ||  ops_j.LS_instr == store_op ||ops_j.LS_instr == other_op);
        
        // SB unused if not a store
        assume(ops_i.LS_instr != store_op ==> !full_SB_i);
        assume(ops_j.LS_instr != store_op ==> !full_SB_j);
        
        // If SB is full for i, it cannot be anymore for j
        assume(full_SB_i ==> !full_SB_j);
        
        // A load following a store may be dependent: load is current (j) and store is previous (i)
        assume((ops_i.LS_instr != store_op || ops_j.LS_instr != load_op) ==> !mem_dep);
        
        // Write-allocate cache: no main mem access
        assume(mem_dep ==> !bus.dbus_j); // simplification as scratchpadsâ€¦
        
        // Mem dep => exceptional priority to store (in-order mem access)
        assume((ops_i.LS_instr == store_op && ops_j.LS_instr == load_op) ==> full_SB_i);
        
        // Assume variable latencies for SB
        assume((!bus.dbus_i && ops_i.LS_instr == store_op) ==> (latencies_i.LS_pipe.ST == 1 || latencies_i.LS_pipe.ST == 2));
        assume((!bus.dbus_j && ops_j.LS_instr == store_op) ==> (latencies_j.LS_pipe.ST == 1 || latencies_j.LS_pipe.ST == 2));
        assume((bus.dbus_i && ops_i.LS_instr == store_op && stages_i.LS_pipe != ST) ==> latencies_i.LS_pipe.ST == 10); // 15 with doc values
        assume((bus.dbus_i && ops_i.LS_instr == store_op && stages_i.LS_pipe == ST) ==> (1 <= latencies_i.LS_pipe.ST && latencies_i.LS_pipe.ST <= 10));
        assume((bus.dbus_j && ops_j.LS_instr == store_op) ==> latencies_j.LS_pipe.ST == 10);
    }
    
    
    init {
        if (param_set.store_buff) {
            call set_init_SB();
            /*// Test config
            assume(ops_i.LS_instr == store_op);
            assume(ops_j.LS_instr == load_op);
            assume(ops_i.I_instr == other_op);
            assume(ops_j.I_instr == other_op);*/
        }
        else {
            // No variable latency for SB, no need for specific store class
            /*assume(ops_i.LS_instr == nop || ops_i.LS_instr == load_op || ops_i.LS_instr == other_op);
            assume(ops_j.LS_instr == nop || ops_j.LS_instr == load_op || ops_j.LS_instr == other_op);*/
            assume(ops_i.LS_instr == load_op || ops_i.LS_instr == other_op);
            assume(ops_j.LS_instr == load_op || ops_j.LS_instr == other_op);
            assume(!full_SB_i && !full_SB_j && !mem_dep);
        }
        
        if (param_set.additional_reduction) {
            //assume(ops_i.LS_instr != nop || ops_i.I_instr != nop || ops_j.LS_instr != nop || ops_j.I_instr != nop); // only nops in pipelines
            assume(ops_i.LS_instr != other_op || ops_j.LS_instr != other_op); // two other_op in LS: evicted
            
            // no one depends on i: no interaction
            assume((!waw.ii && !waw.ji) <==> stages_i.I_pipe == post);
            // no one depends on j
            assume((!waw.ij && !waw.jj) <==> stage_j == post);
        }
        else {
            assume(stages_i.I_pipe != post);
        }
        
        if (!param_set.hazards) {
            assume(!waw.ii && !waw.ij);
            assume(!waw.ji && !waw.jj);
        }
        else {
            // This cannot be dependent
            /*assume(ops_i.LS_instr == nop ==> (!waw.ii && !waw.ij));
            assume(ops_j.LS_instr == nop ==> (!waw.ji && !waw.jj));*/
            assume(ops_i.LS_instr == store_op ==> (!waw.ii && !waw.ij));
            assume(ops_j.LS_instr == store_op ==> (!waw.ji && !waw.jj));
            /*// nor cause a dependency
            assume(ops_i.I_instr == nop ==> (!waw.ii && !waw.ji));
            assume(ops_j.I_instr == nop ==> (!waw.ij && !waw.jj));*/
            
            if (param_set.additional_reduction) {
                // pontential dependencies are not relevant if the involved stages are overtaken
                // LS is considered independent
                assume((stages_i.LS_pipe == EX || stages_i.LS_pipe == WB || stages_i.LS_pipe == ST) ==> (!waw.ii && !waw.ij));
                // I is not considered a cause of dependency
                assume((stages_i.I_pipe == EX2 || stages_i.I_pipe == WB) ==> (!waw.ii && !waw.ji));
                assume((stage_j == EX2 || stage_j == WB) ==> (!waw.ij && !waw.jj));
            }
        }
        
        // Always assume all types of opcodes for I pipeline
        /*assume(ops_i.I_instr == nop || ops_i.I_instr == mac_op || ops_i.I_instr == other_op);
        assume(ops_j.I_instr == nop || ops_j.I_instr == mac_op || ops_j.I_instr == other_op);*/
        assume(ops_i.I_instr == mac_op || ops_i.I_instr == other_op);
        assume(ops_j.I_instr == mac_op || ops_j.I_instr == other_op);
        
        // Only load/store ops can access bus aside from IF
        assume((ops_i.LS_instr != load_op && ops_i.LS_instr != store_op) ==> !bus.dbus_i);
        assume((ops_j.LS_instr != load_op && ops_j.LS_instr != store_op) ==> !bus.dbus_j);
        
        // Assume latencies for IF without bus access
        assume(!bus.pbus_i.LS_pipe ==> latencies_i.LS_pipe.IF == 1);
        assume(!bus.pbus_i.I_pipe ==> latencies_i.I_pipe.IF == 1);
        assume(!bus.pbus_j.LS_pipe ==> latencies_j.LS_pipe.IF == 1);
        assume(!bus.pbus_j.I_pipe ==> latencies_j.I_pipe.IF == 1);
        
        // For previous instructions (i)
        // If IF stage not reached yet, then this will be total latencies for memory access (extreme values, e.g. cache hit/miss)
        assume((bus.pbus_i.I_pipe && stages_i.I_pipe != IF) ==> (latencies_i.I_pipe.IF == 4 || latencies_i.I_pipe.IF == 5 || latencies_i.I_pipe.IF == 8)); // 11 for doc val
        // If initially within IF stage, partial latencies too (full range)
        assume((bus.pbus_i.I_pipe && stages_i.I_pipe == IF) ==> (1 <= latencies_i.I_pipe.IF && latencies_i.I_pipe.IF <= 8));
        
        // Current instructions (j)
        assume((bus.pbus_j.I_pipe && stages_i.I_pipe != IF) ==> (latencies_j.I_pipe.IF == 4 || latencies_j.I_pipe.IF == 5 || latencies_j.I_pipe.IF == 8));
        assume((bus.pbus_j.I_pipe && stages_i.I_pipe == IF) ==> (1 <= latencies_j.I_pipe.IF && latencies_j.I_pipe.IF <= 8));
        
        // Same as I for LS
        assume((bus.pbus_i.LS_pipe && stages_i.LS_pipe != IF) ==> (latencies_i.LS_pipe.IF == 4 || latencies_i.LS_pipe.IF == 5 || latencies_i.LS_pipe.IF == 8));
        assume((bus.pbus_i.LS_pipe && stages_i.LS_pipe == IF) ==> (1 <= latencies_i.LS_pipe.IF && latencies_i.LS_pipe.IF <= 8));
        assume(bus.pbus_j.LS_pipe ==> (latencies_j.LS_pipe.IF == 4 || latencies_j.LS_pipe.IF == 5 || latencies_j.LS_pipe.IF == 8));
        
        // Assume latencies for ID
        assume(latencies_i.I_pipe.ID == 1);
        assume(latencies_j.I_pipe.ID == 1);
        assume(latencies_i.LS_pipe.ID == 1);
        assume(latencies_j.LS_pipe.ID == 1);
        
        // Assume latencies for EX stage apart from load ops with bus access
        assume(ops_i.LS_instr != load_op ==> latencies_i.LS_pipe.EX == 1);
        assume(ops_j.LS_instr != load_op ==> latencies_j.LS_pipe.EX == 1);
        // If it is a load, a cache hit can span 2 cache lines
        assume((!bus.dbus_i && ops_i.LS_instr == load_op) ==> (latencies_i.LS_pipe.EX == 1 || latencies_i.LS_pipe.EX == 2));
        assume((!bus.dbus_j && ops_j.LS_instr == load_op) ==> (latencies_j.LS_pipe.EX == 1 || latencies_j.LS_pipe.EX == 2));
        assume(latencies_i.I_pipe.EX == 1);
        assume(latencies_j.I_pipe.EX == 1);
        
        // Load with bus access
        assume((bus.dbus_i && ops_i.LS_instr == load_op && stages_i.LS_pipe != EX) ==> (latencies_i.LS_pipe.EX == 5 || latencies_i.LS_pipe.EX == 8));
        assume((bus.dbus_i && ops_i.LS_instr == load_op && stages_i.LS_pipe == EX) ==> (1 <= latencies_i.LS_pipe.EX && latencies_i.LS_pipe.EX <= 8));
          
        // Current load instructions (j) will pass through EX
        assume((bus.dbus_j && ops_j.LS_instr == load_op) ==> (latencies_j.LS_pipe.EX == 5 || latencies_j.LS_pipe.EX == 8));
        
        // Assume latencies for EX2 stage
        // From this stage, instructions cannot be stalled anymore
        assume(latencies_i.I_pipe.EX2 == 1);
        assume(latencies_i.LS_pipe.EX2 == 1);
        assume(latencies_j.I_pipe.EX2 == 1);
        assume(latencies_j.LS_pipe.EX2 == 1);
          
        // Assume latencies for WB stage
        assume(latencies_i.I_pipe.WB == 1);
        assume(latencies_i.LS_pipe.WB == 1);
        assume(latencies_j.I_pipe.WB == 1);
        assume(latencies_j.LS_pipe.WB == 1);
          
        // Assume latencies for ST stage
        assume(latencies_i.I_pipe.ST == 1);
        assume(ops_i.LS_instr != store_op ==> latencies_i.LS_pipe.ST == 1);
        assume(latencies_j.I_pipe.ST == 1);
        assume(ops_j.LS_instr != store_op ==> latencies_j.LS_pipe.ST == 1);

        // Assume initial stages for previous instructions
        assume(stages_i.I_pipe == pre || stages_i.I_pipe == IF || stages_i.I_pipe == ID || stages_i.I_pipe == EX || stages_i.I_pipe == EX2 || stages_i.I_pipe == WB || stages_i.I_pipe == post);
        assume(stages_i.LS_pipe == pre || stages_i.LS_pipe == IF || stages_i.LS_pipe == ID || stages_i.LS_pipe == EX || stages_i.LS_pipe == WB || stages_i.LS_pipe == ST);
        
        // Current LS is at pre by design (tricore*.ucl)
        // Assume initial stage for current I instruction
        assume((stages_i.I_pipe == pre || stages_i.I_pipe == IF) ==> stage_j == pre);
        assume(stages_i.I_pipe == ID ==> (stage_j == pre || stage_j == IF));
        assume(stages_i.I_pipe == EX ==> (stage_j == pre || stage_j == IF || stage_j == ID));
        assume(stages_i.I_pipe == EX2 ==> (stage_j == pre || stage_j == IF || stage_j == ID || stage_j == EX));
        assume(stages_i.I_pipe == WB ==> (stage_j == pre || stage_j == IF || stage_j == ID || stage_j == EX || stage_j == EX2));
        
        // Potential conflicts
        // If previous LS has a "problem", then I pipelines have not.
        // By contraposition, if one of the I pipelines has a problem, then LS has not.
        assume(((stages_i.LS_pipe == IF && bus.pbus_i.LS_pipe) || (stages_i.LS_pipe == EX && ops_i.LS_instr == load_op && bus.dbus_i) || (stages_i.LS_pipe == ST && bus.dbus_i)) ==> ((stages_i.I_pipe != IF || !bus.pbus_i.I_pipe) && (stage_j != IF || !bus.pbus_j.I_pipe)));
        
        assume(stages_i.I_pipe != pre || stages_i.LS_pipe != pre || stage_j != pre); // all at pre is meaningless
        
        // This is to allow only specific operations in some stages
        assume(stages_i.I_pipe == EX2 ==> ops_i.I_instr == mac_op);
        assume(stage_j == EX2 ==> ops_j.I_instr == mac_op);
        assume(stages_i.LS_pipe == ST ==> ops_i.LS_instr == store_op);
        
        // Reduce state space by disabling variability: unused latencies since stages overtaken
        assume((stages_i.I_pipe != pre && stages_i.I_pipe != IF) ==> latencies_i.I_pipe.IF == 1);
        assume((stages_i.LS_pipe != pre && stages_i.LS_pipe != IF) ==> latencies_i.LS_pipe.IF == 1);
        assume((stage_j != pre && stage_j != IF) ==> latencies_j.I_pipe.IF == 1);
        assume((stages_i.LS_pipe == ST || stages_i.LS_pipe == WB) ==> latencies_i.LS_pipe.EX == 1);
    }

    next {
        next(cond);
    }
}
