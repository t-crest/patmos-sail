module conditions {

  var op_i, op_j: common.opcode_t;
  var latencies_i, latencies_j: common.latencies_t;
  var tid_i, tid_j: bv2;
  var stage_i: common.stage_t;  

  instance cond : test(cond_op_i: (op_i), cond_op_j: (op_j),
  	   	       cond_latencies_i: (latencies_i),
		       cond_latencies_j: (latencies_j),
		       cond_tid_i: (tid_i),
		       cond_tid_j: (tid_j),
		       cond_stage_i: (stage_i));

  init {
    // Assume all type of opcodes
    assume(op_i == nop || op_i == load_op || op_i == store_op ||
    	   op_i == branch_op || op_i == other_op);
    assume(op_j == nop || op_j == load_op || op_j == store_op ||
    	   op_j == branch_op || op_j == other_op);
    // Assume latencies for ID stage
    assume(latencies_i.id == 1);
    assume(latencies_j.id == 1);
    // Assume latencies for EX stage
    assume(latencies_i.ex == 1);
    assume(latencies_j.ex == 1);        	   
    // Assume scratchpad and no "miss"
    assume(latencies_i.fetch == 1);
    assume(latencies_j.fetch == 1);
    assume(latencies_i.mem == 1);
    assume(latencies_j.mem == 1);
    // Assume that first instruction can take arbitration stage
    assume(stage_i == IF || stage_i == ID ||
           stage_i == EX || stage_i == MEM || stage_i == WB);
    // Assume latencies for WB stage
    assume(latencies_i.wb == 1);
    assume(latencies_j.wb == 1);            	   
    // Relation between tids according to release constraint of instruction
    assume(tid_j == 0bv2);
    assume((stage_i == WB) ==> tid_i == tid_j - 1bv2); // So 3
    // As j starts in pre, i will be in WB when j will be in IF
    assume((stage_i == MEM) ==> tid_i == tid_j); // So 0
    assume((stage_i == EX) ==> tid_i == tid_j - 3bv2); // So 1       
    assume((stage_i == ID) ==> tid_i == tid_j - 2bv2); // So 2  
    assume((stage_i == IF) ==> tid_i == tid_j - 1bv2); // So 3
  }

  next {
    next(cond);
  }

}
