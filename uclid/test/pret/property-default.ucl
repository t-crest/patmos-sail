module main {

  type stage_t = isa.stage_t;
  type opcode_t = isa.opcode_t;

  instance run : conditions();

  next {
    next(run);
  }

  // To check that there is not several instructions per stage
  invariant no_several_ins_per_stage: ((run.cond.pipeline.current_stage == IF ||
  				        run.cond.pipeline.current_stage == ID ||
  				        run.cond.pipeline.current_stage == EX ||
  				        run.cond.pipeline.current_stage == MEM ||
  				        run.cond.pipeline.current_stage == ST ||
  				        run.cond.pipeline.current_stage == WB)
				      	==> run.cond.pipeline.current_stage != run.cond.pipeline.previous_stage);

  invariant equal_tid: ((run.cond.pipeline.current_tid == run.cond.pipeline.previous_tid &&
  	    	         run.cond.pipeline.previous_stage != post && run.cond.pipeline.current_stage != post &&
			 run.cond.pipeline.current_stage != pre && run.cond.pipeline.previous_stage != pre)
  	    		==> ((run.cond.pipeline.current_stage == IF && run.cond.pipeline.previous_stage == WB)));

  invariant no_negative_latency: (run.cond.pipeline.current_latency >= 0 &&
  	    			  run.cond.pipeline.previous_latency >= 0);

  // To check that all instructions have been retired from the run.cond.pipeline ...
  property[LTL] bmc_enough: G(run.cond.step == param.bmc_depth ==> (run.cond.pipeline.current_stage == post &&
  	   			      	   	      	       	    run.cond.pipeline.previous_stage == post));

  // A simple invariant to generate a counter-example for later trace comparison
  invariant generate_counter_example: run.cond.step < param.bmc_depth;

  control {
    vbmc = bmc(param.bmc_depth);
    vunroll = unroll(param.bmc_depth);
    check;
    print_results;
    vbmc.print_cex(run.cond.pipeline.current_op, run.cond.pipeline.current_stage,
    		   run.cond.pipeline.current_latency, run.cond.pipeline.current_tid,
		   run.cond.pipeline.current_progress, run.cond.pipeline.current_delay,
		   run.cond.pipeline.previous_op, run.cond.pipeline.previous_stage,
    		   run.cond.pipeline.previous_latency, run.cond.pipeline.previous_tid,
		   run.cond.pipeline.previous_progress, run.cond.pipeline.previous_delay);
    vunroll.print_cex(run.cond.pipeline.current_op, run.cond.pipeline.current_stage,
    		   run.cond.pipeline.current_latency, run.cond.pipeline.current_tid,
		   run.cond.pipeline.current_progress, run.cond.pipeline.current_delay,		   
		   run.cond.pipeline.previous_op, run.cond.pipeline.previous_stage,
    		   run.cond.pipeline.previous_latency, run.cond.pipeline.previous_tid,
		   run.cond.pipeline.previous_progress, run.cond.pipeline.previous_delay);
  }
}
