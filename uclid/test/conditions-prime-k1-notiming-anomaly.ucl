module conditions {

  var op_i, op_j: isa.opcode_k1_t;
  var latencies_i, latencies_j: isa.latencies_k1_t;
  var stage_i: isa.stage_k1_t;

  instance cond : test(cond_op_i: (op_i), cond_op_j: (op_j),
  	   	       cond_latencies_i: (latencies_i),
		       cond_latencies_j: (latencies_j),
		       cond_stage_i: (stage_i));
  
  init {
    // Assume all type of opcodes for now
    // TODO: need to add the instruction constraints
    // (see section 7 of K1 assembly level optimization)
    assume(op_i == alu_op || op_i == lsu_op || op_i == bcu_id_op ||
    	   op_i == bcu_rr_op || op_i == mau_op);
    assume(op_j == alu_op || op_j == lsu_op || op_j == bcu_id_op ||
    	   op_j == bcu_rr_op || op_j == mau_op);
    // Assume variable latencies for all instructions in IF stage
    assume(0 < latencies_i.fetch && latencies_i.fetch <= param.max_latency);
    assume(0 < latencies_j.fetch && latencies_j.fetch <= param.max_latency);
    // Assume variable latencies for lsu opcodes in ?? stage
    assume((op_i == lsu_op)
    	   ==> 0 < latencies_i.mem && latencies_i.mem <= param.max_latency);
    assume((op_j == lsu_op)
    	   ==> 0 < latencies_j.mem && latencies_j.mem <= param.max_latency);
    assume(stage_i == pre || stage_i == PF || stage_i == ID || stage_i == RR ||
           stage_i == E1 || stage_i == E2 || stage_i == E3 || stage_i == E4);
  }

  next {
    next(cond);
  }
}
